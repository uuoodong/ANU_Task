전처리기(preprocesser)란 - 프로그램을 컴파일할 때 컴파일 직전에 실행되는 별도의 프로그램이다. 
실행되면 각 코드 파일에서 지시자(#으로 시작해서 줄 바꿈으로 끝나는 코드)를 찾는다.
1. macro definitions (#define, #undef) - 매크로 
#define TABLE_SIZE 100
int table1[TABLE_SIZE]; 는 int table1[100];과 같다
#undef TABLE_SIZE
#define TABLE_SIZE 200
int table2[TABLE_SIZE]; 는 int table2[200];과 같다
2. Conditional inclusions (#ifdef, #ifndef, #if, #endif, #else and #elif) - 조건부 컴파일
#ifdef 는 전처리기가 #이 정의되었있는지 확인하고 정의되었잇다면 ifdef 와 endif 사이의 코드가 컴파일 된다.
#ifdef TABLE_SIZE
int table[TABLE_SIZE];
#endif
3. #ifndef 는 ifdef의 반대이다. 정의되지 않았는지 확인한다.
4. Line control (#line)
컴파일 과정에서 오류가 발생하면 오류가 발생한 파일의 이름과 행 번호에 대한 참조와 오류메시지를 제어한다. 형식 : #line number "filename"
5. Error directive (#error)
이 명령을 만나면 해당 메시지를 출력하고 컴파일을 중지한다.
#ifndef __cplusplus
#error A C++ compiler is required!
#endif 
6. Source file inclusion (#include)
#include <header> - 꺾쇠 괄호 사이에 표준 라이브러리를 포함
#include "file" - 사용자 지정 헤더파일 포함
7. 내장 매크로
__DATE__ : 컴파일하는 날짜
__TIME__ : 컴파일하는 시간
__LINE__ : 현재 컴파일하고 있는 줄 번호
__FILE__ : 현재 컴파일하고 있는 파일의 이름
[과제수행소감]
우동헌
선행처리기에 대해서는 C언어를 공부할 때에도 자세하게 공부하지 못한 부분이었습니다.
이번 팀과제를 통해서 기본적으로 배웠던 내용들과 새롭게 배운 내용들을 팀원끼리 서로 알려주고 
좀 더 이해하기 쉽게 비교해가며 공부 할 수 있었습니다. 좋은 팀원들을 만난것 같아 좋습니다. 감사합니다.
박지현
전처리기에대해서 공부해보고 전체코드부분이 동일하게 적용한다는걸 배웠습니다. 
팀원들과 공부하면서 서로 몰랐던 부분에대해서 알려주고 빈곳을 채워주며 더 알차게 배울 수 있던 시간이였던거 같습니다. 감사합니다
임희재
선행처리기(매크로 정의)를 팀별로 공부하면서 C++에 대해 조금씩 알아가고 있습니다. 
모르는것에 대해 서로 물어보고 알려주면서 조금더 자세하게 알게된 시간이었습니다.
최현철
선행처리기에 대해 학습하면서 매크로에대해 더 친해진것같습니다. 
조건부에 대해서도 #ifdef, #ifndef 등에 대해서도 자세히 알게 되었고 회선 
제어문이나 오류 지시문에 대해서도 다시 공부해보는 계기가 되었습니다. 팀원들과 토의하고 피드백하면서 많이 알아가는 유익한 시간이었습니다.
