렌더링 모드 : default renderer, P2D, P3D, PDF, and SVG. 
렌더러 사용법 : size(200, 200, P3D);

P3D로 전환하는 이유
1. 3차원 공간(z 축)의 주어진 점의 깊이를 나타낼 때
2. P2D, P3D는 OpenGL 호환 그래픽 하드웨어를 사용하여 종종 더 효율적임.
3. 일부 그래픽기능(텍스처, 조명)을 P3D에서 사용 가능

3D 변환
translate()함수를 통해서 중심좌표를 지정하고 rotateX(), rotateY(), rotateZ()함수를 통해 각각 x, y ,z축을 중심으로 회전할 수 있다.

3D 모양
입체도형을 만들기위한 첫번째 방법은 box()와 sphere()를 쓰는 것이다. 각각 육면체와 구체를 생성한다.
두번째 방법은 만약 4개의 삼각형으로 구성된 4면 피라미드를 그리고 싶을때 사용할 수 있는 beginShape(), endShape(), vertex()를 사용한다.
vertex함수는 x,y,z 인수를 사용해 각 좌표를 이어 도형을 생성한다.

Lighting 조명
ambientLight() - 사물이 모든면에서 고르게 조명됨 ex) ambientLight (0,0,255);
directionalLight() - 한 방향에서 조명이 나오고 표면에 부딪힌 후 방향성 조명이 모든 방향으로 산란한다. 
ex) directionalLight (0, 255, 0, 0, -1, 0);
spotLight() - 스포트라이트는 방향성 라이트와 비슷하지만 세밀하게 조명 효과를 제어할 수 있다.
pointLight() - 점 조명은 180도 원뿔의 스포트라이트이다

Perspective 원근법
더 멀리 떨어져있는 객체를 표시
float fov = PI/3;
float cameraZ = (height/2.0) / tan(fov/2.0);
perspective(fov, float(width)/float(height), cameraZ/10.0, cameraZ*10.0);
camera
translate(), rotate(), scale()을 이용하여 수행할 수 있지만 더 편리함
background(0);
camera(mouseX, height/2, (height/2) / tan(PI/6), width/2, height/2, 0, 0, 1, 0);
translate(width/2, height/2, -100);
stroke(255);
noFill();
box(200);

[과제수행소감]
우동헌 : 최근들어 학교전체에 독감이 유행하고있어 컴퓨터공학과 학생들도 조심하고있습니다.
손상길학생이 비록 독감으로 인해 많은 참여가 힘들었지만 손상길학생이 작성했던 기존의 논문
내용들을 참고해서 보고서를 작성할 수 있었습니다. 이번 과제에서는 수업에서 가장 언급이 
많았던 3D에 대해서 표현법과 원리 등을 조사하였습니다. 덕분에 기초에 대해 좀더 단단하게 
만들 수 있는 기회가 되었습니다. 감사합니다.
도현승 : 참 재미있었습니다.
손상길 : 아픈몸을 이끌고 동헌학생과 현승학생이 도와준 덕분에 소감을 적을 수 있었습니다. 
제가 옆에서 도와준 것은 많이 없지만 함께 자주 연락을 주고 받으면서 토의와 협의를 통해 
과제를 끝낼수 있었던 것 같습니다. 팀원들에게 짐이 되지 않도록 노력하며 앞으로 열심히하는 
학생이 되겠습니다.
